{"version":3,"sources":["reducers/messages.js","reducers/todos.js","reducers/eventBus.js","reducers/index.js","actions/types.js","store.js","components/MessageSnackbar.jsx","actions/todos.js","actions/eventBus.js","components/TodoList.jsx","components/EditDialogBox.jsx","components/AddNewForm.jsx","components/Home.jsx","components/Header.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["initialState","message","todos","lastId","open","note","id","title","combineReducers","state","action","type","payload","length","filter","todo","map","messages","eventBus","middleware","thunk","store","createStore","index","composeWithDevTools","applyMiddleware","connect","props","React","useState","setOpen","setMessage","useEffect","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","axios","defaults","xsrfHeaderName","xsrfCookieName","config","headers","dispatch","useStyles","makeStyles","theme","avatar","padding","spacing","background","borderRadius","width","row","getTodos","get","then","res","data","catch","err","classes","Table","TableBody","price","TableRow","key","className","onClick","e","preventDefault","TableCell","align","noteToUpdate","deleteTodo","delete","updateTodo","body","JSON","stringify","put","setNote","onCloseDialogBox","Dialog","DialogTitle","Avatar","aria-label","Typography","variant","DialogContent","TextField","margin","required","fullWidth","label","defaultValue","autoFocus","onChange","target","value","color","style","addTodo","post","Box","display","flexDirection","p","center","root","Home","Fragment","Paper","Divider","Header","text","App","exact","path","component","TodoList","AddNewForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.a48546bc.chunk.js","sourcesContent":["import {ADD_SUCCESS, DELETE_SUCCESS, GET_MESSAGE, UPDATE_SUCCESS} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    message: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_MESSAGE:\r\n            return {\r\n                message: action.payload.message\r\n            };\r\n        case ADD_SUCCESS:\r\n            return {\r\n                message: \"Added\"\r\n            };\r\n        case UPDATE_SUCCESS:\r\n            return {\r\n                message: \"Updated\"\r\n            };\r\n        case DELETE_SUCCESS:\r\n            return {\r\n                message: \"Deleted\"\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import {ADD_SUCCESS, DELETE_SUCCESS, GET_SUCCESS, UPDATE_SUCCESS} from \"../actions/types\";\r\n\r\n\r\nconst initialState = {\r\n    todos: [],\r\n    lastId: 0\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload],\r\n                lastId: action.payload.id\r\n            };\r\n        case GET_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: action.payload,\r\n                lastId: action.payload[action.payload.length - 1].id ? action.payload[action.payload.length - 1].id : 0\r\n            };\r\n        case DELETE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter((todo) => todo.id !== action.payload.id)\r\n            };\r\n        case UPDATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map( (todo) => {\r\n                    if(todo.id === action.payload.id)\r\n                        return action.payload;\r\n                    return todo;\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {SET_OPEN_EDIT_DIALOG} from \"../actions/types\";\r\n\r\n\r\nconst initialState = {\r\n    open: false,\r\n    note: {id: 0, title: \"\"}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type){\r\n        case SET_OPEN_EDIT_DIALOG:\r\n            return {\r\n                ...state,\r\n                open:  action.payload.open,\r\n                note: action.payload.note\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport messages from './messages';\r\nimport todos from \"./todos\";\r\nimport eventBus from \"./eventBus\";\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    messages,\r\n    eventBus\r\n});","export const ADD_SUCCESS = 'ADD_SUCCESS';\r\nexport const GET_SUCCESS = 'GET_SUCCESS';\r\nexport const DELETE_SUCCESS = 'DELETE_SUCCESS';\r\nexport const UPDATE_SUCCESS = 'UPDATE_SUCCESS';\r\n\r\nexport const GET_MESSAGE = 'GET_MESSAGE';\r\nexport const SET_OPEN_EDIT_DIALOG = 'SET_OPEN_EDIT_DIALOG';","import {applyMiddleware, createStore} from \"redux\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport index from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  index,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n    ['Use Redux']\r\n);\r\n\r\nexport default store;","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction MessageSnackbar(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState('');\r\n\r\n    useEffect(() => {\r\n        setMessage(props.message);\r\n        if (props.message !== null)\r\n            setOpen(true);\r\n    }, [props.message]);\r\n\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n            }}\r\n            open={open}\r\n            autoHideDuration={10000}\r\n            onClose={onClose}\r\n            ContentProps={{\r\n                'aria-describedby': 'message-id',\r\n            }}\r\n            message={message}\r\n        />\r\n    );\r\n}\r\n\r\nMessageSnackbar.propTypes = {\r\n    message: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    message: state.messages.message,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MessageSnackbar);","import {\r\n    ADD_SUCCESS,\r\n    DELETE_SUCCESS,\r\n    GET_MESSAGE,\r\n    GET_SUCCESS,\r\n    UPDATE_SUCCESS,\r\n} from \"./types\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\r\naxios.defaults.xsrfCookieName = \"csrftoken\";\r\n\r\nconst config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\nexport const addTodo = (title, id) => (dispatch) => {\r\n\r\n    const body = JSON.stringify({title});\r\n    axios.post('http://localhost:8082/api/v1/todos' ,body, config)\r\n        .then(res => {\r\n\r\n            dispatch({\r\n                type: ADD_SUCCESS,\r\n                payload: {\r\n                    title: title,\r\n                    id: id\r\n                }\r\n            });\r\n        }).catch(err =>{\r\n        dispatch({\r\n            type: GET_MESSAGE,\r\n            payload: {\r\n                message: \"Add element error\",\r\n            }\r\n        })\r\n    })\r\n};\r\n\r\nexport const getTodos = () => (dispatch) => {\r\n\r\n    axios.get('http://localhost:8082/api/v1/todos', config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        }).catch(err =>{\r\n        dispatch({\r\n            type: GET_MESSAGE,\r\n            payload: { message:\"Get elements error\"}\r\n        })\r\n    })};\r\n\r\nexport const deleteTodo = (id) => (dispatch) => {\r\n\r\n    axios.delete(`http://localhost:8082/api/v1/todos/${id}`, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: DELETE_SUCCESS,\r\n                payload: {\r\n                    id: id\r\n                }\r\n            })\r\n        }).catch(err =>{\r\n        dispatch({\r\n            type: GET_MESSAGE,\r\n            payload: {\r\n                message: \"Delete element error\",\r\n            }\r\n        })\r\n    })};\r\n\r\nexport const updateTodo = (id, title) => (dispatch) => {\r\n\r\n    const body = JSON.stringify({title});\r\n\r\n    axios.put(`http://localhost:8082/api/v1/todos/${id}`, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_SUCCESS,\r\n                payload: {\r\n                    id: id,\r\n                    title: title\r\n                }\r\n            })\r\n        }).catch(err => {\r\n        dispatch({\r\n            type: GET_MESSAGE,\r\n            payload: {\r\n                message: \"Update element error\",\r\n            }\r\n        })\r\n    })};","import {GET_MESSAGE, SET_OPEN_EDIT_DIALOG} from \"./types\";\r\n\r\nexport const setOpen = (open, note) => (dispatch) => {\r\n    dispatch({\r\n        type: SET_OPEN_EDIT_DIALOG,\r\n        payload: {\r\n            open: open,\r\n            note: note\r\n        }\r\n    })\r\n};\r\n\r\nexport const setMessage = (message) => (dispatch) => {\r\n    dispatch({\r\n        type: GET_MESSAGE,\r\n        payload: {\r\n            message: message\r\n        }\r\n    })\r\n};\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {getTodos} from \"../actions/todos\";\r\nimport {setOpen} from \"../actions/eventBus\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        padding: theme.spacing(2, 2, 2, 2),\r\n        background: '#606be2',\r\n        borderRadius: 0,\r\n        width: '97%'\r\n    },\r\n    row: {\r\n        '&:hover': {background: '#606be2'}\r\n    }\r\n}));\r\n\r\n\r\nfunction TodoList(props) {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        props.getTodos();\r\n    }, []);\r\n\r\n    const onClickRow = note => e => {\r\n        e.preventDefault();\r\n        props.setOpen(true, note);\r\n    };\r\n\r\n    return (\r\n        <Table>\r\n            <TableBody>\r\n                {props.todos.map(price => (\r\n                    <TableRow key={price.id} className={classes.row} onClick={onClickRow(price)}>\r\n                        <TableCell align=\"center\">{price.title}</TableCell>\r\n                    </TableRow>\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    getTodos: PropTypes.func.isRequired,\r\n    setOpen: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: state.todos.todos,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getTodos, setOpen})(TodoList);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {deleteTodo, updateTodo} from \"../actions/todos\";\r\nimport {setMessage, setOpen} from \"../actions/eventBus\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        padding: theme.spacing(2, 2, 2, 2),\r\n        background: '#606be2',\r\n        borderRadius: 0,\r\n        width: '97%'\r\n    },\r\n}));\r\n\r\nfunction EditDialogBox(props) {\r\n    const classes = useStyles();\r\n    const [note, setNote] = React.useState(\"\");\r\n\r\n    const onEditTodo = e => {\r\n        if (!note) {\r\n         props.setMessage(\"No new note in text field\")\r\n        } else {\r\n            props.updateTodo(props.noteToUpdate.id, note);\r\n            props.setOpen(false, note);\r\n        }\r\n    };\r\n\r\n    const onCloseDialogBox = e => {\r\n        props.setOpen(false, note);\r\n    };\r\n\r\n    const onChangeNote = e => {\r\n        setNote(e.target.value);\r\n    };\r\n\r\n    const onDeleteTodo = id => e => {\r\n        props.deleteTodo(id);\r\n        props.setOpen(false, note);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={props.open} onClose={onCloseDialogBox}>\r\n            <DialogTitle>\r\n                <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                    <Typography variant=\"h5\">Edit Todo</Typography>\r\n                </Avatar>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    label=\"Todo\"\r\n                    type=\"text\"\r\n                    defaultValue={props.noteToUpdate.title}\r\n                    autoFocus\r\n                    onChange={onChangeNote}\r\n                />\r\n                <Button\r\n                    onClick={onEditTodo}\r\n                    color=\"primary\">\r\n                    Update todo\r\n                </Button>\r\n                <Button onClick={onDeleteTodo(props.noteToUpdate.id)}>Delete todo:\r\n                    {props.noteToUpdate.title}\r\n                </Button>\r\n                <Button onClick={onCloseDialogBox}>\r\n                    <Avatar aria-label=\"recipe\" style={{background: '#606be2'}}>\r\n                        <CloseIcon/>\r\n                    </Avatar>\r\n                </Button>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nEditDialogBox.propTypes = {\r\n    noteToUpdate: PropTypes.object.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired,\r\n    updateTodo: PropTypes.func.isRequired,\r\n    setOpen: PropTypes.func.isRequired,\r\n    setMessage: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    noteToUpdate: state.eventBus.note,\r\n    open: state.eventBus.open\r\n});\r\n\r\nexport default connect(mapStateToProps, {deleteTodo, updateTodo, setOpen, setMessage})(EditDialogBox);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {setMessage} from \"../actions/eventBus\";\r\nimport {addTodo} from \"../actions/todos\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nfunction AddNewForm(props) {\r\n    const [note, setNote] = React.useState(\"\");\r\n\r\n    const onChangeNote = e => {\r\n        setNote(e.target.value);\r\n    };\r\n\r\n    const onAddTodo = e => {\r\n        if (!note) {\r\n            props.setMessage(\"No new note in text field\")\r\n        } else {\r\n            const id = props.lastId + 1;\r\n            e.preventDefault();\r\n            props.addTodo(note, id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"row\">\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth={true}\r\n                    label=\"Todo\"\r\n                    type=\"text\"\r\n                    defaultValue={note}\r\n                    onChange={onChangeNote}\r\n                />\r\n            <Box p={2} center=\"true\">\r\n                <Button onClick={onAddTodo}>Add todo</Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nAddNewForm.propTypes = {\r\n    lastId: PropTypes.number.isRequired,\r\n    addTodo: PropTypes.func.isRequired,\r\n    setMessage: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    lastId: state.todos.lastId\r\n});\r\n\r\nexport default connect(mapStateToProps, {addTodo, setMessage})(AddNewForm);","import React from 'react';\r\nimport TodoList from \"./TodoList\";\r\nimport EditDialogBox from \"./EditDialogBox\";\r\nimport AddNewForm from \"./AddNewForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(2, 1, 2, 1),\r\n        margin: theme.spacing(10, 50, 10, 50),\r\n    },\r\n}));\r\n\r\nexport default function Home() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Paper className={classes.root}>\r\n            <AddNewForm/>\r\n            <Divider/>\r\n            <TodoList/>\r\n            <EditDialogBox/>\r\n        </Paper>\r\n        </React.Fragment>\r\n    )\r\n};","import React from 'react';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        padding: theme.spacing(2, 2, 2, 2),\r\n        background: '#606be2',\r\n        borderRadius: 0,\r\n        width: '97%'\r\n    },\r\n}));\r\n\r\nexport default function Header() {\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            <Typography variant=\"h4\" className={classes.text}>Todos</Typography>\r\n        </Avatar>\r\n    )\r\n}","import React from \"react\";\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux';\r\nimport store from \"../store\";\r\nimport ErrorSnackbar from \"./MessageSnackbar\";\r\nimport Home from \"./Home\";\r\nimport Header from \"./Header\";\r\nimport TodoList from \"./TodoList\";\r\nimport AddNewForm from \"./AddNewForm\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <ErrorSnackbar/>\r\n            <Router>\r\n                <Header/>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Home}/>\r\n                    <Route exact path=\"/list\" component={TodoList}/>\r\n                    <Route exact path=\"/add\" component={AddNewForm}/>\r\n                </Switch>\r\n            </Router>\r\n        </Provider>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}